// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package obs_test

import (
	"context"
	"github.com/lucianogarciaz/kit/cqs"
	"sync"
)

// Ensure, that CommandMock does implement cqs.Command.
// If this is not the case, regenerate this file with moq.
var _ cqs.Command = &CommandMock{}

// CommandMock is a mock implementation of cqs.Command.
//
//	func TestSomethingThatUsesCommand(t *testing.T) {
//
//		// make and configure a mocked cqs.Command
//		mockedCommand := &CommandMock{
//			CommandNameFunc: func() string {
//				panic("mock out the CommandName method")
//			},
//		}
//
//		// use mockedCommand in code that requires cqs.Command
//		// and then make assertions.
//
//	}
type CommandMock struct {
	// CommandNameFunc mocks the CommandName method.
	CommandNameFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// CommandName holds details about calls to the CommandName method.
		CommandName []struct {
		}
	}
	lockCommandName sync.RWMutex
}

// CommandName calls CommandNameFunc.
func (mock *CommandMock) CommandName() string {
	if mock.CommandNameFunc == nil {
		panic("CommandMock.CommandNameFunc: method is nil but Command.CommandName was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCommandName.Lock()
	mock.calls.CommandName = append(mock.calls.CommandName, callInfo)
	mock.lockCommandName.Unlock()
	return mock.CommandNameFunc()
}

// CommandNameCalls gets all the calls that were made to CommandName.
// Check the length with:
//
//	len(mockedCommand.CommandNameCalls())
func (mock *CommandMock) CommandNameCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCommandName.RLock()
	calls = mock.calls.CommandName
	mock.lockCommandName.RUnlock()
	return calls
}

// Ensure, that CommandHandlerMock does implement cqs.CommandHandler.
// If this is not the case, regenerate this file with moq.
var _ cqs.CommandHandler[cqs.Command] = &CommandHandlerMock[cqs.Command]{}

// CommandHandlerMock is a mock implementation of cqs.CommandHandler.
//
//	func TestSomethingThatUsesCommandHandler(t *testing.T) {
//
//		// make and configure a mocked cqs.CommandHandler
//		mockedCommandHandler := &CommandHandlerMock{
//			HandleFunc: func(ctx context.Context, cmd C) ([]cqs.Event, error) {
//				panic("mock out the Handle method")
//			},
//		}
//
//		// use mockedCommandHandler in code that requires cqs.CommandHandler
//		// and then make assertions.
//
//	}
type CommandHandlerMock[C cqs.Command] struct {
	// HandleFunc mocks the Handle method.
	HandleFunc func(ctx context.Context, cmd C) ([]cqs.Event, error)

	// calls tracks calls to the methods.
	calls struct {
		// Handle holds details about calls to the Handle method.
		Handle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Cmd is the cmd argument value.
			Cmd C
		}
	}
	lockHandle sync.RWMutex
}

// Handle calls HandleFunc.
func (mock *CommandHandlerMock[C]) Handle(ctx context.Context, cmd C) ([]cqs.Event, error) {
	if mock.HandleFunc == nil {
		panic("CommandHandlerMock.HandleFunc: method is nil but CommandHandler.Handle was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Cmd C
	}{
		Ctx: ctx,
		Cmd: cmd,
	}
	mock.lockHandle.Lock()
	mock.calls.Handle = append(mock.calls.Handle, callInfo)
	mock.lockHandle.Unlock()
	return mock.HandleFunc(ctx, cmd)
}

// HandleCalls gets all the calls that were made to Handle.
// Check the length with:
//
//	len(mockedCommandHandler.HandleCalls())
func (mock *CommandHandlerMock[C]) HandleCalls() []struct {
	Ctx context.Context
	Cmd C
} {
	var calls []struct {
		Ctx context.Context
		Cmd C
	}
	mock.lockHandle.RLock()
	calls = mock.calls.Handle
	mock.lockHandle.RUnlock()
	return calls
}
